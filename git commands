git commit

git branch <гілка>

git checkout -b <гілка>  # створить гілку, якщо немає, і перейде на неї

git checkout <гілка>
git checkout <комміт>

git merge == git rebase'
merge - в тій гілці на якій сидиш добавиться коміт який успадкує зміни з 2х гілок
rebase - та гілка на якій сидиш копійнеться на <іншу>
git rebase <HEAD> <інша>  # підтягне <інша> до HEAD 


Відносні посилання
git checkout main^
git checkout main~2  # рахує від наступного

git branch -f <гілка яку переміщуємо>  <гілка відносно якої переміщуємо>
git branch -f <гілка яку переміщуємо>  <коміт куди переміщуємо>

Переміщення HEAD 
git checkout <коміт>


Відміна комітів
git reset == git revert
git reset HEAD~1  # відміна змін останнього коміту ()
git revert HEAD # переписує історію  # створить новий коміт' протилежний до останнього


Git Cherry-pick  # копіює серію комітів до HEAD~1
Git rebase -i  # вибір і перестановка комітів
cherry-pick == rebase -i
git cherry-pick <коміт1> <коміт2> ...
git rebase <HEAD> <інша>  # підтягне <інша> до HEAD


git commit --amend  # правка останнього коміту


Таги
git tag v1 <коміт>
git checkout v1  # перемістить HEAD на таг



git checkout main^  # скине HEAD на 1 коміт назад в своїй гілці
git checkout main^2  # переде на другого батька
^2  # перехід міє батьками
~2  # перехід назад


Витягнути дані з віддаленого репозиторію
git fetch  # завантажує коміти та оновлює origin/main (без merge)


Витягнути дані з віддаленого репозиторію та merge
git pull

















